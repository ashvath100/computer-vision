# -*- coding: utf-8 -*-
"""Data_YOLO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kLvICOo3H_u3Vw7yEyi_tqDCzGNg4Q5C

# Data Cleaning for YOLO v3

## Mounting the Google Drive
"""

from google.colab import drive

drive.mount('/content/drive')

"""# Cleaning the CSV"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import cv2
import os

df = pd.read_csv(r'/content/drive/My Drive/VAUV Dataset/json_csv/data_cleaned_2018_1.csv')
image_dir = r'/content/drive/My Drive/VAUV Dataset/Clipped Images/2018_VID_1_3'

df.head(2)

def get_max_min(df):
    ''' Note that this works only for the cases where we have all four cordinates'''
    df['x_min'] = -1.
    df['y_min'] = -1.
    df['x_max'] = -1.
    df['y_max'] = -1.

    for i in range(len(df)):
        df['x_min'][i] = min(df['x1'][i], df['x2'][i], df['x3'][i], df['x4'][i]).astype('float32')
        df['x_max'][i] = max(df['x1'][i], df['x2'][i], df['x3'][i], df['x4'][i]).astype('float32')

        df['y_min'][i] = min(df['y1'][i], df['y2'][i], df['y3'][i], df['y4'][i]).astype('float32')
        df['y_max'][i] = max(df['y1'][i], df['y2'][i], df['y3'][i], df['y4'][i]).astype('float32')

    return df

def fill_class_id(df):
    df['class_id'] = 1
    return(df)

def check_dims(df):
    for i in ['1', '2', '3', '4']:
        print(np.max(df[f'x{i}']), end=' ')
        print(np.max(df[f'y{i}']), end=' ')
        print()

check_dims(df)

def show_points(img_path, ):
    # img = cv2.imread(img_path)
    # img = cv2.circle(img, (int(df['x1']), int(df['y1'])), 2, (0,0,255), 8)
    # plt.imshow(img[...,::-1])

    # need to work with this

def resize_column(df, column_list, img_shape=(720, 1280), resize_shape=(416, 416)):

    #  Need to work on this. Naive division does not work.
    x_div = img_shape[0]
    y_div = img_shape[1]

    x_mul = resize_shape[0]
    y_mul = resize_shape[1]

    for cl in column_list:
        if(cl[0] == 'x'):
            new_column = cl + '_resized'
            df[new_column] = 1.
            
            for i, val in enumerate(df[cl]):
                val = (val / x_div) * x_mul
                df[new_column][i] = val

        elif(cl[0] == 'y'):
            new_column = cl + '_resized'
            df[new_column] = 1.
            for i, val in enumerate(df[cl]):
                val = (val / y_div) * y_mul
                df[new_column][i] = val

    return df

df = get_max_min(df)

df = fill_class_id(df)

column_resized = ['x1', 'x2', 'x3', 'x4', 'y1', 'y1', 'y3', 'y4', 'x_min', 'x_max', 'y_min', 'y_max']
df = resize_column(df, column_resized)

df.head(3)

"""# Testing an Image with cordinates

Originally
"""

img = cv2.imread('/content/2018_VID_1_3_frame325.jpg')
print(img.shape)

img = cv2.circle(img, (293, 427), 5, (0,0,255), 8)

plt.imshow(img[...,::-1])

img = cv2.circle(img, (290, 106), 5, (0,0,255), 8)

plt.imshow(img[...,::-1])

img = cv2.circle(img, (590,	125), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])

img = cv2.circle(img, (581, 414), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])

"""After resizing"""

img = cv2.imread('/content/2018_VID_1_3_frame325.jpg')
print(img.shape)
img = cv2.resize(img, (416, 416))
plt.imshow(img[...,::-1])
plt.show()
print(img.shape)

# After naive division
img = cv2.circle(img, (66, 221), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])

# After naive division
img = cv2.circle(img, (50, 61), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])

# Correct point
img = cv2.imread('/content/2018_VID_1_3_frame325.jpg')
img = cv2.resize(img, (416, 416))
img = cv2.circle(img, (100, 250), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])

"""1 2 Case"""

img = cv2.imread('/content/2018_VID_1_3_frame854.jpg')
print(img.shape)

img = cv2.circle(img, (290, 636), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

"""Another 4 cord case"""

img = cv2.imread('/content/2018_VID_1_3_frame373.jpg')
print(img.shape)
img = cv2.circle(img, (333, 469), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (331, 130), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

# 650 	149.714 	633.143 	454.857 	
img = cv2.circle(img, (650, 149), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (633, 454), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

"""Vauge Case

733.779 	716.998 	803.659 	39.890 	1220.526 	184.468 	1109.683 	704.950
"""

img = cv2.imread('/content/2018_VID_1_3_frame116.jpg')
print(img.shape)
img = cv2.circle(img, (733, 716), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (803, 39), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (1220, 184), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

"""This is confirmed 1-2, 1-2 case checked from labelbox"""

img = cv2.imread('/content/2018_VID_1_3_frame867.jpg')
print(img.shape)

for i in range(len(df)):
    if(df['External ID'][i] == '2018_VID_1_3_frame867.jpg'):
        print(df['x1'][i], df['y1'][i], df['x2'][i], df['y2'][i], df['x3'][i], df['y3'][i], df['x4'][i], df['y4'][i])

img = cv2.circle(img, (37, 556), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (6, 424), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (286, 642), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

img = cv2.circle(img, (266, 178), 5, (0,0,255), 8)
plt.imshow(img[...,::-1])
plt.show()

